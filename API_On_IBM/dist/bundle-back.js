/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./app.js":
/*!****************!*\
  !*** ./app.js ***!
  \****************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nvar createError = __webpack_require__(/*! http-errors */ \"http-errors\");\nvar express = __webpack_require__(/*! express */ \"express\");\nvar path = __webpack_require__(/*! path */ \"path\");\nvar cookieParser = __webpack_require__(/*! cookie-parser */ \"cookie-parser\");\nvar logger = __webpack_require__(/*! morgan */ \"morgan\");\n\n\nvar indexRouter = __webpack_require__(/*! ./routes/index */ \"./routes/index.js\");\n//var usersRouter = require('./routes/users');\n\nvar app = express();\n\n\n// view engine setup\n//app.set('views', path.join(__dirname, 'views'));\n//app.set('view engine', 'jade');\n\n\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\n\napp.use('/', indexRouter);\n//app.use('/users', usersRouter);\n\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  next(createError(404));\n});\n\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = \"0\";\n// error handler\napp.use(function(err, req, res, next) {\n\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\n\nmodule.exports = app;\n\n\n//# sourceURL=webpack://expressapi/./app.js?");

/***/ }),

/***/ "./bin/www":
/*!*****************!*\
  !*** ./bin/www ***!
  \*****************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("//#!/usr/bin/env node\n\nvar app = __webpack_require__(/*! ../app */ \"./app.js\");\nvar debug = __webpack_require__(/*! debug */ \"debug\")('expressapi:server');\nvar  http = __webpack_require__(/*! http */ \"http\");\nvar https = __webpack_require__(/*! https */ \"https\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\n\n__webpack_require__(/*! ../globalVar */ \"./globalVar.js\");\n//Get port from environment and store in Express\n\n\n/////////////////////////////////////////////////////////////////////////////////////////\n//var port = normalizePort(process.env.PORT || port);   \nconsole.log('PORT',process.env.PORT)\nport = normalizePort(process.env.PORT || port);   \nconsole.log(\"port used is \", port); \n\napp.set('port', port);\n//process.env.NODE_TLS_REJECT_UNAUTHORIZED = 0\nconsole.log('check***',process.env.NODE_TLS_REJECT_UNAUTHORIZED)\n\n//Create HTTP server\nvar server = http.createServer(app);\n/*var server = https.createServer({\n  key: fs.readFileSync('./server.key'),\n  cert: fs.readFileSync('./server.cert')\n}, app)*/\nconst serverIP = '0.0.0.0'\n\n/*\nhttps.createServer({\n  key: fs.readFileSync('cert.key'),\n  cert: fs.readFileSync('./cert.pem'),\n  rejectUnauthorized: false} , app).listen(port , (err) => {\n      if (err) {\n        return console.error(err);\n      }\n      console.info(`\\nServer running on https://${serverIP}:${port} `);\n    });\n*/\n\n//Listen on provided port, on all network interfaces\nserver.listen(2643);\nserver.on('error', onError);\nserver.on('listening', onListening);\n\n//Normalize a port into a number, string, or false\nfunction normalizePort(val) \n{\n\n  var port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n//Event listener for HTTP server \"error\" event\nfunction onError(error) \n{\n  \n  if (error.syscall !== 'listen') \n  {\n      throw error;\n  }\n\n  var bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  //handle specific listen errors with friendly messages\n  switch (error.code) {\n    \n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    \n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    \n    default:\n      throw error;\n  }\n}\n\n//Event listener for HTTP server \"listening\" event.\nfunction onListening() \n{\n  \n  console.log(\"here... waiting for requests\");\n\n  var addr = server.address();\n  var bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n\n\n  console.log(\"port\", port);\n  console.log(\"addr\", addr);\n  console.log(\"bind\", bind);\n\n  debug('Listening on ' + bind);\n}\n\n\n//# sourceURL=webpack://expressapi/./bin/www?");

/***/ }),

/***/ "./globalVar.js":
/*!**********************!*\
  !*** ./globalVar.js ***!
  \**********************/
/***/ (() => {

eval("\n\nglobal.port = undefined;\nglobal.dbInstance = undefined;\nglobal.dbTypeSelected = undefined;\n\n\n///////////////////////// MySQL\n/*dbTypeSelected = \"MySQL\";\t\t\nconsole.log(\"dbTypeSelected \", dbTypeSelected);\n\nport = 3030;\t\t\t\t\t\t\nconsole.log(\"port \", port);\n\n//dbInstance = \"SPHA014\";\ndbInstance = \"\";\t\t\t\nconsole.log(\"dbInstance \", dbInstance);*/\n\n/*\n///////////////////////// DB2\ndbTypeSelected = \"DB2\";\t\nconsole.log(\"dbTypeSelected \", dbTypeSelected);\n\nport = 50000;\t\t\nconsole.log(\"port \", port);\n\ndbInstance = \"SPHA002\";\nconsole.log(\"dbInstance \", dbInstance);\n*/\n///////////////////////// DB2 on demo.mdcms.ch\ndbTypeSelected = \"DB2\";\t\nconsole.log(\"dbTypeSelected \", dbTypeSelected);\nport = 2649;\t\t\t\t//////2600-2649\t\nconsole.log(\"port \", port);\n//dbInstance = \"SPHMDNA01\";\ndbInstance = \"\";\n//console.log(\"dbInstance \", dbInstance);\n\n\n//# sourceURL=webpack://expressapi/./globalVar.js?");

/***/ }),

/***/ "./routes/DB2/connWithPConnector.js":
/*!******************************************!*\
  !*** ./routes/DB2/connWithPConnector.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("// const {Connection, Statement} = require('idb-pconnector');\r\n\r\n\r\n// async function executeUpsert(query) {\r\n\r\n//     const connection = new Connection({\r\n//         url: '*LOCAL'\r\n//     });\r\n\r\n//     const statement = new Statement(connection)\r\n\r\n//     await statement.prepare(query);\r\n\r\n//     await statement.execute();\r\n// }\r\n\r\n\r\nconst { DBPool } = __webpack_require__(/*! idb-pconnector */ \"idb-pconnector\");\r\n\r\nasync function executeUpsert(query) {\r\n    const pool = new DBPool({\r\n        url: \"*LOCAL\"\r\n    });\r\n    \r\n    const connection = pool.attach();\r\n    \r\n    const statement = connection.getStatement();\r\n    \r\n    //   const sql = `CALL QSYS2.SET_PASE_SHELL_INFO('*CURRENT', '/QOpenSys/pkgs/bin/bash')`\r\n    \r\n    \r\n    await statement.prepare(query);\r\n     await statement.execute().then((result) => {\r\n         console.log(\"result: \",result);\r\n     }).catch((err) => {\r\n         console.log(\"err :\", err);\r\n     });\r\n    \r\n    // if (results) {\r\n    //     console.log(`results:\\n ${JSON.stringify(results)}`);\r\n    // }\r\n    await pool.detach(connection);\r\n}\r\n\r\n// poolExample().catch((error) => {\r\n    //   console.error(error);\r\n    // });\r\n    \r\nmodule.exports = executeUpsert\n\n//# sourceURL=webpack://expressapi/./routes/DB2/connWithPConnector.js?");

/***/ }),

/***/ "./routes/DB2/connectionDB.js":
/*!************************************!*\
  !*** ./routes/DB2/connectionDB.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nlet connectionDB = function (connObj) \n{\n\t\tconst {dbconn, dbstmt} = __webpack_require__(/*! idb-connector */ \"idb-connector\");\n\n    \treturn new Promise((resolve, reject) => {\n  \n\t\t    var connection = new dbconn();\n\t      \tconnection.conn('*LOCAL');\n\n\t\t\tvar stmt = new dbstmt(connection);\n\t\t//  stmt.exec(connObj['query'] WITH NC, function (results, err) {\n\t\t    stmt.exec(connObj['query'], function(results, err)\n\t\t    {\n\t\t        if (err) \n\t\t        {\n\t\t            console.log( {'Error': true, 'Message': `${err}`, 'Query': `${connObj['query']}`});\n\t              \treject(err);\n\t\t        } \n\t\t        else \n\t\t        {\n\t  \t        \tconsole.log(connObj['query']);\n\t  \t        \tstmt.close();  \n\t  \t        \tresolve(results);\n\t\t        }\n\t\t    })\n\t\t})\n}\n\nmodule.exports = \n{\n\tconnectionDB\n}\n\n//# sourceURL=webpack://expressapi/./routes/DB2/connectionDB.js?");

/***/ }),

/***/ "./routes/MySQL/connectionDB.js":
/*!**************************************!*\
  !*** ./routes/MySQL/connectionDB.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nlet connectionDB = async function (connObj) \n{\n\n    let promisePool = __webpack_require__(/*! ./mySqlConn */ \"./routes/MySQL/mySqlConn.js\");\n    \n    return new Promise( async(resolve, reject) => {\n  \n        try\n        {\n            const [results, fields] = await promisePool.execute(connObj['query']);\n            console.log(connObj['query']);\n            resolve(results);\n        }\n        catch (err) \n        {\n            console.log( {'Error': true, 'Message': `${err}`, 'Query': `${connObj['query']}`});\n            reject(err);\n        }\n    })\n}  \n\nmodule.exports = \n{\n  connectionDB\n}\n\n//# sourceURL=webpack://expressapi/./routes/MySQL/connectionDB.js?");

/***/ }),

/***/ "./routes/MySQL/mySqlConn.js":
/*!***********************************!*\
  !*** ./routes/MySQL/mySqlConn.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst config1 = __webpack_require__(/*! ../../settings */ \"./settings.js\");\n\nconst mysql = __webpack_require__(/*! mysql2 */ \"mysql2\");\n\nlet pool = mysql.createPool({\n\n    host : config1.DB_URL_MYSQL.host,\n    user : config1.DB_URL_MYSQL.user,\n    password : config1.DB_URL_MYSQL.password,\n    database : config1.DB_URL_MYSQL.database,\n    connectionLimit : 10\n})\nlet promisePool = pool.promise();\n\n\npromisePool.getConnection((err, connection) => {\n\n    if (err) \n    {\n        if (err.code === 'PROTOCOL_CONNECTION_LOST') \n        {\n            console.error('Database connection was closed.')\n        }\n        if (err.code === 'ER_CON_COUNT_ERROR') \n        {\n            console.error('Database has too many connections.')\n        }\n        if (err.code === 'ECONNREFUSED') \n        {\n            console.error('Database connection was refused.')\n        }\n    }\n\n    if (connection) \n        connection.release()\n\n    return\n})\n\nmodule.exports = promisePool;\n\n\n//# sourceURL=webpack://expressapi/./routes/MySQL/mySqlConn.js?");

/***/ }),

/***/ "./routes/index.js":
/*!*************************!*\
  !*** ./routes/index.js ***!
  \*************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var express = __webpack_require__(/*! express */ \"express\");\r\nvar router = express.Router();\r\nvar url = __webpack_require__(/*! url */ \"url\");\r\nvar cors = __webpack_require__(/*! cors */ \"cors\");\r\nlet conn = undefined;\r\n__webpack_require__(/*! ../globalVar */ \"./globalVar.js\");\r\n\r\n\r\nif (dbTypeSelected == \"DB2\")\r\n{\r\n    conn = __webpack_require__(/*! ./DB2/connectionDB */ \"./routes/DB2/connectionDB.js\");\r\n    console.log(\"conn in case of DB2\", conn);\r\n}\r\nelse\r\n{\r\n  if (dbTypeSelected == \"MySQL\")\r\n  {\r\n      conn = __webpack_require__(/*! ./MySQL/connectionDB */ \"./routes/MySQL/connectionDB.js\");\r\n      console.log(\"conn in case of MySQL\", conn);\r\n  }\r\n}\r\n\r\nconst connect = __webpack_require__(/*! ./DB2/connWithPConnector */ \"./routes/DB2/connWithPConnector.js\");\r\n\r\nvar corsOptions = {\r\n  origin: \"http://localhost:8080\"\r\n}\r\n{/*\r\n//idb-connector way of doing things\r\nconst {dbconn, dbstmt} = require('idb-connector');\r\n\r\nfunction executeQuery (connObj) {\r\n    console.log('shilpi');\r\n    return new Promise((resolve, reject) => {\r\n\r\n            var connection = new dbconn();\r\n      connection.conn('*LOCAL');\r\n\r\n                  var stmt = new dbstmt(connection);\r\n        //  stmt.exec(connObj['query'] WITH NC, function (results, err) {\r\n            stmt.exec(connObj['query'], function(results, err)\r\n            {\r\n                if (err)\r\n                {\r\n                    console.log( {'Error': true, 'Message': `${err}`, 'Query': `${connObj['query']}`});\r\n              reject(err);\r\n                }\r\n                else\r\n                {\r\n                        console.log(connObj['query']);\r\n  \t        \tstmt.close(); \r\n                        connection.disconn(); \r\n                         connection.close();    \r\n  \t        \tresolve(results);\r\n                }\r\n              \r\n            })\r\n        })\r\n}\r\n\r\nfunction executeQuerySQL (connObj) {\r\n\r\n    return new Promise((resolve, reject) => {\r\n\r\n      pool.execute(connObj['query'], function(results, err)\r\n      {\r\n          if (err)\r\n          {\r\n              console.log( {'Error': true, 'Message': `${err}`, 'Query': `${connObj['query']}`});\r\n              reject(err);\r\n          }\r\n          else\r\n          {\r\n              console.log(connObj['query']);\r\n              resolve(results);\r\n          }\r\n      })\r\n  })\r\n}\r\n\r\n*/}\r\nrouter.get(\"/test/:dbname\", cors(), async(req, res) => {\r\n  const db = req.params.dbname\r\n  const connObj = {}\r\n  connObj['query'] = `SELECT * FROM ${db}.entdmdpos`\r\n  var response = await conn.connectionDB(connObj)\r\n  res.json({\r\n    response\r\n  })\r\n})\r\n\r\nrouter.get(\"/CHECK\", cors(), async (req, res) =>{\r\nconsole.log('LANDED CHECK API ******')\r\n            res.send(JSON.stringify({ status: 200, error: null,\r\n              response: {\r\n                entities:\"hello\" \r\n              }\r\n            }));\r\n});\r\n\r\n\r\nrouter.get(\"/EntPos/:dbname/:diagid\", cors(), async (req, res) => {\r\n  const DB = req.params.dbname\r\n  const diagID = req.params.diagid\r\n  const connObj = {}\r\n  let positions = []\r\n  connObj['query'] = `SELECT * FROM ${DB}.entdmdpos WHERE diagid = '${diagID}'`\r\n  conn.connectionDB(connObj)\r\n  .then((result) => {\r\n    res.json({\r\n          status: 200,\r\n          error: null,\r\n          response: {\r\n            result\r\n          }\r\n        })\r\n  }).catch((err) => {\r\n    res.json({\r\n          error: true,\r\n          response: []\r\n        })\r\n  });\r\n})\r\nrouter.options(\"/EntPos/:dbname/:data\", cors(corsOptions))\r\nrouter.post(\"/EntPos/:dbname/:data\", cors(corsOptions), async (req, res) => {\r\n  const data = JSON.parse(req.params.data)\r\n  const dbname = req.params.dbname\r\n  const { entName: diagID, pos: newPos } = data;\r\n  let connObj = {}\r\n  const getRows = () => {\r\n    var rows = ''\r\n    newPos.forEach(pos => {\r\n      let template = `('${diagID}', '${pos.name}', ${pos.x}, ${pos.y})`\r\n      rows += template + ','\r\n    })\r\n    return rows.slice(0,-1);\r\n  }\r\n    let query = `MERGE INTO ${dbname}.ENTDMDPOS AS pos USING (VALUES ${getRows()}) AS merge (DIAGID, ENTID, XPOS, YPOS) ON pos.DIAGID = merge.DIAGID AND pos.ENTID = MERGE.ENTID WHEN MATCHED THEN UPDATE SET pos.XPOS = merge.XPOS, pos.YPOS = merge.YPOS WHEN NOT MATCHED THEN INSERT (DIAGID, ENTID, XPOS, YPOS) VALUES (merge.DIAGID, MERGE.ENTID, merge.XPOS, MERGE.YPOS) WITH NONE`\r\n    connect(query)\r\n    .then(result => {\r\n      console.log('----------------------------------------------------------')\r\n      console.log(result)\r\n      console.log('----------------------------------------------------------')\r\n    })\r\n    .catch(err => {\r\n      console.log('----------------------------------------------------------')\r\n      console.log(err);\r\n      console.log('----------------------------------------------------------')\r\n    })\r\n})\r\nrouter.get(\"/EntDList/:dbname/:entity\", cors(), async(req,res) => {\r\n  const {dbname,entity} = req.params;\r\n  const connObj = {}\r\n  let positions = []\r\n  connObj['query'] = `SELECT * FROM ${dbname}.ENTDLST WHERE DGMID = '${entity}'`\r\n  positions = await conn.connectionDB(connObj)\r\n  try {\r\n    res.json({\r\n      status: 200,\r\n      error: null,\r\n      response: {\r\n        positions\r\n      }\r\n    })\r\n  } catch (e) {\r\n    res.json({\r\n      error: e\r\n    })\r\n  }\r\n})\r\nrouter.get(\"/EntDRels/:dbname/:entity\", cors(), async(req,res) => {\r\n  const {dbname,entity} = req.params;\r\n  const connObj = {}\r\n  let positions = []\r\n  connObj['query'] = `SELECT * FROM ${dbname}.ENTDRELS WHERE DGMID = '${entity}'`\r\n  positions = await conn.connectionDB(connObj)\r\n  try {\r\n    res.json({\r\n      status: 200,\r\n      error: null,\r\n      response: {\r\n        positions\r\n      }\r\n    })\r\n  } catch (e) {\r\n    res.json({\r\n      error: e\r\n    })\r\n  }\r\n})\r\nrouter.get(\"/EntDPList/:dbname/:entity\", cors(), async(req,res) => {\r\n  const {dbname,entity} = req.params;\r\n  const connObj = {}\r\n  let positions = []\r\n  connObj['query'] = `SELECT * FROM ${dbname}.ENTDPLST WHERE DGMID = '${entity}'`\r\n  positions = await conn.connectionDB(connObj)\r\n  try {\r\n    res.json({\r\n      status: 200,\r\n      error: null,\r\n      response: {\r\n        positions\r\n      }\r\n    })\r\n  } catch (e) {\r\n    res.json({\r\n      error: e\r\n    })\r\n  }\r\n})\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get(\"/Entities/:dbname\", cors(), async (req, res) =>\r\n{\r\n\r\n\r\n    //console.log(\"inside entities \", dbTypeSelected);\r\n\r\n    var connObj = {};\r\n    var entities = [];\r\n    var entrels = [];\r\n    var dbname = [req.params.dbname]\r\n\r\n    connObj['query'] = `SELECT * from ${dbname}.ENTITIES`;\r\n    entities = await conn.connectionDB(connObj);\r\n//  if (err)\r\n//    throw err;\r\n\r\n//  else\r\n//  {\r\n        console.log(\"entities = \", entities);\r\n        connObj['query'] = `SELECT * from ${dbname}.ENTRELS`;\r\n        entrels = await conn.connectionDB (connObj);\r\n    //  if (err1)\r\n    //    throw err1;\r\n\r\n    //  else\r\n    //  {\r\n            console.log(\"entrels = \", entrels);\r\n            res.send(JSON.stringify({ status: 200, error: null,\r\n              response: {\r\n                entities: entities,\r\n                entrels: entrels\r\n              },\r\n            }));\r\n    //  };\r\n\r\n//  };\r\n});\r\nrouter.get('/Entjrules/:dbname', cors(), async (req, res) => {\r\n  console.log('inside entjrules');\r\n  let connObj = {}\r\n  const dbname = [req.params.dbname]\r\n  let entjrules;\r\n  connObj['query'] = `SELECT * FROM ${dbname}.ENTJRULES`;\r\n  entjrules = await conn.connectionDB (connObj)\r\n  const resp  = JSON.stringify({\r\n    status: 200,\r\n    error: null,\r\n    response: {\r\n      entjrules\r\n    }\r\n  })\r\n  res.send(resp)\r\n})\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get('/PgmDefs/:dbname', cors(), async (req, res) =>\r\n{\r\n\r\n    console.log('inside pgmdefs');\r\n\r\n    var connObj = {};\r\n    var programs = [];\r\n    var chartArray = [];\r\n    var chartArrayWithoutD = [];\r\n    var dbname = [req.params.dbname]\r\n\r\n    connObj['query'] = `SELECT * from ${dbname}.PGMDEFS`;\r\n    programs = await conn.connectionDB (connObj);\r\n//  if (err)\r\n//    throw err;\r\n\r\n//  else\r\n//  {\r\n        console.log(\"programs = \", programs);\r\n        connObj['query'] = `SELECT * FROM ${dbname}.PGMCALLS WHERE PGMID <> CLDPGM AND CALLCLS = 'D' AND EXCPGM = ''`;\r\n        chartArray = await conn.connectionDB (connObj);\r\n    //  if (err)\r\n    //    throw err;\r\n    //  else\r\n    //  {\r\n            console.log('pgmcalls = ', chartArray);\r\n            // fetch pgmcalls with callcls = ''\r\n            connObj['query'] = `SELECT * FROM ${dbname}.PGMCALLS WHERE PGMID <> CLDPGM AND CALLCLS = '' AND EXCPGM = ''`;\r\n            chartArrayWithoutD = await conn.connectionDB (connObj);\r\n        //  if (err)\r\n        //    throw err;\r\n\r\n        //  else\r\n        //  {\r\n\r\n                res.send(\r\n                    JSON.stringify({\r\n                      status: 200,\r\n                      error: null,\r\n                      response: {\r\n                          programs: programs,\r\n                          chartArray: chartArray,\r\n                          chartArrayWithoutD: chartArrayWithoutD,\r\n                      },\r\n                    })\r\n                );\r\n        //  }\r\n //  }\r\n\r\n//  }\r\n\r\n});\r\n/* fetch srcmbrnm,srcfile, srcdir from pgmdefs */\r\nrouter.get('/SourceMember/:dbname/:pgmid/', cors(), async (req, res) =>\r\n{\r\n    console.log(`source member req recieved - ${req.url}`);\r\n  var dbname = [req.params.dbname]\r\n  var results = [];\r\n  var connObj = {};\r\n  var pgmid = [req.params.pgmid]\r\n console.log('pgmid',pgmid);\r\n  connObj['query'] = `SELECT SRCMBRNM, SRCFILE, SRCDIR from ${dbname}.PGMDEFS WHERE PGMID = '${req.params.pgmid}'`;\r\n  results = await conn.connectionDB (connObj);\r\n  console.log('check members',results)\r\n /*if(results.length == 0){\r\n   results[0] = 'hello'\r\n   console.log('result 0')\r\n  res.send(JSON.stringify({ status: 200, error: null,\r\n    response: {\r\n      results: results \r\n    },\r\n  }));\r\n }\r\n  else{\r\n  console.log('in else');*/\r\n  res.send(JSON.stringify({ status: 200, error: null,\r\n    response: {\r\n      results: results\r\n    },\r\n  }));\r\n // }\r\n});\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get('/SourceMemberModule/:dbname/:pgmid/', cors(), async (req, res) =>\r\n{\r\n    console.log(`source member req recieved - ${req.url}`);\r\n  var dbname = [req.params.dbname]\r\n  var results = [];\r\n  var connObj = {};\r\n  var pgmid = [req.params.pgmid]\r\n console.log('pgmid',pgmid);\r\n  connObj['query'] = `SELECT MODSRCMBR AS SRCMBRNM, MODSRC AS SRCFILE, MODSRCLIB AS SRCDIR from ${dbname}.PGMEMODM WHERE MODNAME = '${req.params.pgmid}'`;\r\n  results = await conn.connectionDB (connObj);\r\n  console.log('check members',results)\r\n /*if(results.length == 0){\r\n   results[0] = 'hello'\r\n   console.log('result 0')\r\n  res.send(JSON.stringify({ status: 200, error: null,\r\n    response: {\r\n      results: results \r\n    },\r\n  }));\r\n }\r\n  else{\r\n  console.log('in else');*/\r\n  res.send(JSON.stringify({ status: 200, error: null,\r\n    response: {\r\n      results: results\r\n    },\r\n  }));\r\n // }\r\n});\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get('/member/:memberID/:memberType/:memberLib', cors(), async (req, res) =>\r\n{\r\n\r\n    console.log('Source member');\r\n    console.log(`member req recieved - ${req.url}`);\r\n\r\n    req.params.id, req.params.type, req.params.lib\r\nconsole.log('printing values', req.params.memberID, req.params.memberType, req.params.memberLib);\r\n    var dbname = [req.params.memberLib]\r\n    var connObj = {};\r\n\r\n    connObj['query'] = `SET SCHEMA ${dbname}`;\r\n    await conn.connectionDB (connObj);\r\n\r\n   /* connObj['query'] = `SELECT * from ${dbInstance}.PGMCODE WHERE PGMID = '${req.params.memberID}'`;\r\n    console.log(connObj['query']);\r\n    var srcCode1 = await conn.connectionDB (connObj);\r\n    console.log(srcCode1);*/\r\n\r\n    var srcCode2 = undefined;\r\n\r\n    connObj['query'] = `CREATE ALIAS ${req.params.memberLib}.TMPSRC${req.params.memberID} FOR ${req.params.memberLib}.${req.params.memberType}(${req.params.memberID})`;\r\n    await conn.connectionDB (connObj);\r\n\r\n    connObj['query']= `SELECT * FROM ${req.params.memberLib}.TMPSRC${req.params.memberID}`;\r\n    srcCode2 = await conn.connectionDB (connObj);\r\n   // console.log(\"srcCode2 data  \", srcCode2);\r\n\r\n  /*  connObj['query']= `SELECT count(*) FROM ${req.params.memberLib}.TMPSRC${req.params.memberID}`;\r\n    srcCode2 = await conn.connectionDB (connObj);\r\n    console.log(\"srcCode2  \", srcCode2);*/\r\n\r\n    connObj['query'] = `DROP ALIAS ${req.params.memberLib}.TMPSRC${req.params.memberID}`;\r\n    await conn.connectionDB (connObj);\r\n\r\n //   console.log(\"code = \", srcCode1);\r\n    res.send(JSON.stringify({ status: 200, error: null,\r\n      response: {\r\n        data: srcCode2\r\n      },\r\n    }));\r\n\r\n});\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get(\"/EntListDU/:dbname\", cors(),async(req, res) => {\r\n\r\n  console.log(\"inside EntList data usage\");\r\n\r\n  var connObj = {};\r\n  var results = [];\r\n  var entrels = [];\r\n  var dbname = [req.params.dbname]\r\n\r\n  connObj['query'] = `SELECT * from ${dbname}.ENTITIES ORDER BY ENTID`;\r\n  results = await conn.connectionDB (connObj);\r\n  connObj['query'] = `SELECT * from ${dbname}.ENTRELS`;\r\n  entrels = await conn.connectionDB (connObj);\r\n\r\n//  if (err)\r\n//    throw err;\r\n\r\n//  elseresponse: {\r\n  \r\n                          \r\n//  {\r\n        console.log(\"entities = \", results);\r\n        res.send(JSON.stringify({ status: 200, error: null, response: {\r\n                     files:results, entrels:entrels}}));\r\n//  }\r\n\r\n});\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get(\"/ObjectDefs/:dbname\", cors(),async(req, res) => {\r\n\r\n  console.log(\"inside fetch object definition\");\r\n\r\n  var connObj = {};\r\n  var results = [];\r\n  var dbname = [req.params.dbname]\r\n  \r\n  connObj['query'] = `SELECT  trim(OBJID) AS ID, trim(ODOBTX) AS TEXT, trim(OBJTYP) AS OBJTYP from ${dbname}.OBJDEFS ORDER BY OBJID`;\r\n  results = await conn.connectionDB (connObj);\r\n \r\n  console.log(\"objdefs = \", results);\r\n        res.send(JSON.stringify({ status: 200, error: null, response: {\r\n                     results}}));\r\n\r\n});\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get(\"/DataUsageDiagram/Program/:dbname/:pgmid\", cors(),async (req, res) =>\r\n{\r\n\r\n    console.log(\"inside Data Usage Diagram - pgmid\");\r\n\r\n    var pgmid = [req.params.pgmid];\r\n    var entities = [];\r\n    var entschema = [];\r\n   // var pgmcode = [];\r\n    var connObj = {};\r\n    var dbname = [req.params.dbname]\r\n    connObj['query'] = `SELECT  A.*, B.PGMTX, C.ENTTX FROM  ${dbname}.PGMENTS AS A LEFT JOIN ${dbname}.PGMDEFS AS B ON trim(A.PGMID)=trim(B.PGMID) LEFT JOIN ${dbname}.ENTITIES AS C ON trim(A.ENTID)=trim(C\r\n.ENTID) WHERE TRIM(A.PGMID)='${pgmid}' order by WHFUSG DESC`;\r\n    entities = await conn.connectionDB (connObj);\r\n//  if (err)\r\n//    throw err;\r\n//  else\r\n//  {\r\n          console.log(\"entities = \", entities);\r\n          var arrent = [];\r\n          entities.map((ent) =>\r\n          {\r\n              if (ent.ENTID !== null) arrent.push(`'${ent.ENTID}'`);\r\n          });\r\n\r\n          console.log(\"arrent = \", arrent);\r\n          if(arrent.length == 0){\r\n                console.log('********result 0 ')\r\n                  res.send(\r\n                      JSON.stringify({\r\n                        status: 200,\r\n                        error: true,\r\n                        response: {\r\n                        },\r\n                      })\r\n                      );\r\n          return;\r\n         }\r\n          connObj['query'] = `SELECT trim(ENTID) AS ENTID, trim(SHORTNM) AS ID, trim(FTXT) as TEXT, trim(UPD) AS UPD , trim(PGMNM) AS PGMNM  FROM ${dbname}.PGMSCMDB AS A WHERE trim(A.ENTID) in (${arrent}) AND TRIM(A.PGMID)='${pgmid}' order by UPD DESC`;\r\n          entschema = await conn.connectionDB (connObj);\r\n       // if (err){\r\n        //  throw err;\r\n        \r\n       // else\r\n       // {\r\n              console.log(\"entschema = \", entschema);\r\n    // connObj['query'] = `SELECT LINENUM as ID, STN as TEXT, trim(FILENM) as FILENM,  trim(SVAR1DB) as SVAR1 FROM ${dbname}.PGMCODE AS A WHERE trim(A.FILENM) in (${arrent}) AND trim(A.PGMID)='${pgmid}'`;\r\n        connObj['query'] = `SELECT LINENUM as ID, STN as TEXT, trim(FILENM) as FILENM,  trim(SVAR1DB) as SVAR1, trim(PGMID) as PGMID  FROM ${dbname}.PGMCODE AS A WHERE trim(A.FILENM) in (${arrent}) ORDER BY LINENUM `;     \r\n        pgmcode = await conn.connectionDB (connObj);\r\n        connObj['query'] = `SELECT RULEID as ID, STN as TEXT, trim(FILENM) as FILENM , LINENUM FROM ${dbname}.PGMCODE AS A WHERE A.RULTYP = 'B' AND trim(A.FILENM) in (${arrent}) AND TRIM(A.PGMID)='${pgmid}' `;     \r\n        bruledata  = await conn.connectionDB (connObj);\r\n\r\n        connObj['query'] = `SELECT RULEID as ID, LINENUM   FROM ${dbname}.PGMCODE AS A WHERE A.RULTYP = 'E' AND  TRIM(A.PGMID)='${pgmid}' `;     \r\n        bruleend  = await conn.connectionDB (connObj);\r\n          \r\n                  \r\n//  if (err)\r\n            //    throw err;\r\n            //  else\r\n            //  {\r\n                  res.send(\r\n                      JSON.stringify({\r\n                        status: 200,\r\n                        error: null,\r\n                        response: {\r\n                          entities: entities,\r\n                          entschema: entschema,\r\n                          pgmcode: pgmcode,\r\n                          bruledata:  bruledata,\r\n                          bruleend : bruleend, \r\n                        },\r\n                      })\r\n                      );\r\n              //  }\r\n  \r\n        //  }\r\n  //   }\r\n  \r\n  });\r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get(\"/DataUsageDiagram/File/:dbname/:entid\", cors(),async (req, res) =>\r\n{\r\n\r\n      console.log(\"inside Data Usage Diagram - entid\", [req.params.entid]);\r\n\r\n      var entid = [req.params.entid];\r\n      var dbname = [req.params.dbname];\r\n      var programs = [];\r\n      var pgmschema = [];\r\n      var pgmcode = [];\r\n      var entschema = [];\r\n\r\n      var connObj = {};\r\n\r\n      connObj['query'] = `SELECT  A.*, B.PGMTX FROM  ${dbname}.PGMENTS AS A LEFT JOIN ${dbname}.PGMDEFS  AS B ON trim(A.PGMID)=trim(B.PGMID) WHERE TRIM(A.ENTID)='${entid}' order by WHFUSG DESC`;\r\n      programs = await conn.connectionDB (connObj);\r\n  //  if (err)\r\n  //    throw err;\r\n  //  else\r\n  //  {\r\n          var arrpgm = [];\r\n          programs.map((pgm) =>\r\n          {\r\n            if (pgm.PGMID !== null)\r\n            {\r\n                let pgm1 = pgm.PGMID.trim()\r\n              //arrpgm.push(`'${pgm.PGMID}'`);\r\n                arrpgm.push(`'${pgm1}'`);\r\n            }\r\n          });\r\n          console.log(\"arrpgm = \", arrpgm);\r\n\r\n          connObj['query'] = `SELECT trim(PGMID) AS PGMID, trim(SHORTNM) AS ID, trim(FTXT) as TEXT,trim(UPD) AS UPD , trim(PGMNM) AS PGMNM  FROM ${dbname}.PGMSCMDB AS A WHERE trim(A.PGMID) in (${arrpgm}) AND TRIM(A.ENTID)='${entid}' order by UPD DESC`;\r\n          pgmschema = await conn.connectionDB (connObj);\r\n      //  if (err)\r\n      //    throw err;\r\n      //  else\r\n      //  {\r\n              console.log(\"RESULTS in DFD = \", pgmschema);\r\n              /* commenting for source browser */\r\n            //  connObj['query'] = `SELECT trim(PGMID) as PGMID, LINENUM as ID, STN as TEXT, FILENM as FILENM,  trim(SVAR1DB) as SVAR1 FROM ${dbname}.PGMCODE AS A WHERE A.PGMID in (${arrpgm}) AND A.FILENM='${entid}'`;\r\n              connObj['query'] = `SELECT trim(PGMID) as PGMID, LINENUM as ID, STN as TEXT, FILENM as FILENM,  trim(SVAR1DB) as SVAR1 FROM ${dbname}.PGMCODE AS A WHERE  A.FILENM='${entid}' order by LINENUM`;\r\n              pgmcode = await conn.connectionDB (connObj);\r\n          //  if (err)\r\n          //    throw err;\r\n          //  else\r\n          //  {\r\n            connObj['query'] = `SELECT trim(ENTID) AS PGMID, trim(SHORTNM) AS ID, trim(FTXT) as TEXT  FROM ${dbname}.ENTSCHEMA AS A WHERE TRIM(A.ENTID)='${entid}'`;\r\n            entschema = await conn.connectionDB (connObj);\r\n        connObj['query'] = `SELECT RULEID as ID, STN as TEXT, trim(PGMID) as PGMID , LINENUM FROM ${dbname}.PGMCODE AS A WHERE A.RULTYP = 'B' AND trim(A.PGMID) in (${arrpgm}) AND TRIM(A.FILENM)='${entid}' `;     \r\n        bruledata  = await conn.connectionDB (connObj);\r\n\r\n        connObj['query'] = `SELECT RULEID as ID, LINENUM   FROM ${dbname}.PGMCODE AS A WHERE A.RULTYP = 'E' AND  trim(A.PGMID) in (${arrpgm}) `;     \r\n        bruleend  = await conn.connectionDB (connObj);\r\n        //  if (err)\r\n        //    throw err;\r\n        //  else\r\n        //  {\r\n                res.send(\r\n                  JSON.stringify({\r\n                    status: 200,\r\n                    error: null,\r\n                    response: {\r\n                      programs: programs,\r\n                      pgmschema: pgmschema,\r\n                      pgmcode: pgmcode,\r\n                      entschema: entschema,\r\n                      bruledata: bruledata,\r\n                      bruleend: bruleend,\r\n                    },\r\n                  })\r\n                );\r\n        //  };\r\n    //  };\r\n//  };\r\n//  };\r\n\r\n});\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nrouter.get('/PgmDiagSchemas/:dbname/:pgms', cors(),async (req, res) =>\r\n{\r\n\r\n    var entities = {};\r\n    var entPrograms = [];\r\n    var results = [];\r\n    var results2 = [];\r\n  var dbname = [req.params.dbname];\r\n  var entidValues = {};\r\n  var entititySupportresult = [];\r\n  var entitityString = '';\r\n\r\n    const pgms = JSON.parse(req.params.pgms);\r\n    console.log('PGMS = ', pgms);\r\n\r\n    let pgmIdValues = '(';\r\n    pgms.map((id, index) => {\r\n      if (index === 0) pgmIdValues += \"'\" + id + \"'\";\r\n      else pgmIdValues += ',' + \"'\" + id + \"'\";\r\n    });\r\n    pgmIdValues += ')';\r\n\r\n    console.log('pgmIdValues = ', pgmIdValues);\r\n\r\n    var connObj = {};\r\n\r\n    connObj['query'] = `SELECT * FROM ${dbname}.PGMSCMDB WHERE PGMID IN ${pgmIdValues};`\r\n    results = await conn.connectionDB (connObj);\r\n//  if (err)\r\n//    throw err;\r\n//  else\r\n//  {\r\n        connObj['query'] = `SELECT  A.*, B.PGMTX, C.ENTTX FROM  ${dbname}.PGMFILES AS A LEFT JOIN ${dbname}.PGMDEFS AS B ON trim(A.PGMID)=trim(B.PGMID) LEFT JOIN ${dbname}.ENTITIES AS C ON trim(A.ENTID)=trim(C.ENTID)  WHERE TRIM(A.PGMID) IN ${pgmIdValues}`;\r\n        results2 = await conn.connectionDB (connObj);\r\n    //  if (err)\r\n    //    throw err;\r\n    //  else\r\n    //  {\r\n            results2.map((ent) => {\r\n            var entpgmid = ent.PGMID.trim();\r\n            if (!(entpgmid in entities))\r\n            {\r\n              entities[entpgmid] = [];\r\n            }\r\n            if (ent.ENTID !== null) entities[entpgmid].push(`${ent.ENTID}`);\r\n            });\r\n\r\n            connObj['query'] = `SELECT * FROM ${dbname}.ENTITIES`;\r\n            entPrograms = await conn.connectionDB (connObj);\r\n            /*  for (let [key, value] of Object.entries(entities)) {\r\n    value.map((d) => {\r\n      d = d.trim();\r\n      if (entidValues[d] === undefined) entidValues[d] = [];\r\n    });\r\n  }\r\n  for (var i in entidValues) {\r\n    entitityString += `'${i}',`;\r\n  }\r\n  entitityString = entitityString.slice(0, -1);\r\n  connObj[\r\n    'query'\r\n  ] = `SELECT * FROM ${dbname}.ENTSCHEMA WHERE ENTID IN (${entitityString});`;\r\n  entititySupportresult = await conn.connectionDB(connObj);\r\n  entititySupportresult.map((d) => {\r\n    entidValues[d.ENTID.trim()].push(d);\r\n  });*/\r\n        //  if (err)\r\n        //    throw err;\r\n        //  else\r\n        //  {\r\n          res.send(\r\n            JSON.stringify({\r\n              status: 200,\r\n              error: null,\r\n              response: results,\r\n              filesUsedByPgm: entities,\r\n              entPrograms: entPrograms,\r\n\r\n            })\r\n          );\r\n  //  };\r\n//  }\r\n//  }\r\n\r\n});\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n/*router.get(\"/SourceBrowser/:dbname/:shortnm\", cors(),async (req, res) =>\r\n{\r\n  var shortnm = [req.params.shortnm];\r\n  var dbname = [req.params.dbname];\r\n  var connObj = {};\r\n  var results = [];\r\n  connObj['query'] = `SELECT *  FROM ${dbname}.Pgmcode WHERE trim(mvardb) = '${shortnm}' or trim(svar1db) = '${shortnm}' order by pgmid`;\r\n  results = await conn.connectionDB (connObj);\r\n  res.send(JSON.stringify({ status: 200, error: null, response: results}));\r\n\r\n});*/\r\n\r\nrouter.get(\"/SBData/:dbname/:pgmnm\", cors(),async (req, res) =>\r\n{\r\n  var pgmId = [req.params.pgmnm];\r\n  var dbname = [req.params.dbname];\r\n  var connObj = {};\r\n  var results = [];\r\n  connObj['query'] = `SELECT *  FROM ${dbname}.PrcCallExp  WHERE PgmID = '${pgmId}'`;\r\n  results = await conn.connectionDB (connObj);\r\n  res.send(JSON.stringify({ status: 200, error: null, response: {prcdata:results}}));\r\n\r\n});\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get(\"/SourceBrowser/:dbname/:pgmId\", cors(), async (req, res) =>\r\n{\r\n\r\n  var pgmId = [req.params.pgmId];\r\n//  var shortnm = [req.params.shortnm];\r\n  var dbname = [req.params.dbname];\r\n  var PrcCallsExplosionData = [];\r\n  var RBrowser = [];\r\n  var connObj = {};\r\n\r\n  //let responseForUI = {};\r\n\r\n  console.log('Source browser query executions!');\r\n  //responseForUI.pgmID=pgmId;\r\n  connObj['query'] = `SELECT * FROM ${dbname}.PrcCallExp WHERE PgmID = '${pgmId}'`;\r\n  PrcCallsExplosionData = await conn.connectionDB (connObj);\r\n  //connObj['query'] = `SELECT * , FORMAT(LINENUM,2) as LINENUM FROM ${dbname}.Pgmcode WHERE trim(mvardb) = '${shortnm}' or trim(mvar) = '${shortnm}' order by pgmid`;\r\n  //connObj['query'] = `SELECT *  FROM ${dbname}.Pgmcode WHERE trim(mvardb) = '${shortnm}' or trim(svar1db) = '${shortnm}' order by pgmid`;\r\n // RBrowser = await conn.connectionDB (connObj);\r\n  res.send(JSON.stringify({ status: 200, error: null,\r\n    response: {\r\n      pgmId: pgmId,\r\n      PrcCallsExplosionData: PrcCallsExplosionData,\r\n     // RBrowser: RBrowser\r\n  }}));\r\n  /*let sql7= `SELECT * FROM PrcCallExp WHERE PgmID = '${pgmId}'`;\r\n  let query7 = await conn.query(sql7, async (err7, results7)=>{\r\n    if(err7) throw err7;\r\n    responseForUI.PrcCallsExplosionData = results7;\r\n     //  Fetch PrcCallsExplosion data\r\n     let sql1= `SELECT * , FORMAT(LINENUM,2) as LINENUM FROM Pgmcode WHERE trim(mvardb) = '${shortnm}' or trim(mvar) = '${shortnm}' order by pgmid`;\r\n     console.log(`SELECT *, FORMAT(LINENUM,2) as LINENUM FROM Pgmcode WHERE trim(mvardb) = '${shortnm}'`)\r\n     let query1 = await conn.query(sql1, async (err1, results1)=>{\r\n       if(err1) throw err1;\r\n       responseForUI.RBrowser = results1;\r\n//console.log(\"show whats in response==\",responseForUI);\r\n  res.send(JSON.stringify({\r\n      \"Error\": false,\r\n      \"result\": responseForUI\r\n  }));\r\n  });\r\n\r\n});*/\r\n});\r\n\r\n\r\nrouter.get(\"/readFile/:filename\", cors(),(req, res)=>\r\n{\r\n  var filenm=req.params.filename;\r\n  console.log(\"whats in filename===\", filenm)\r\n  var fs = __webpack_require__(/*! fs */ \"fs\");\r\n\r\nvar readMe = fs.readFileSync(`../QRPGLESRC/${filenm}.rpgle`, 'utf8').split('\\n');\r\nconsole.log(\"readme==\", readMe)\r\nres.send(JSON.stringify({ status: 200, error: null,\r\n  response: {\r\n   data:readMe\r\n   },\r\n  }));\r\n})\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////// DOUBTFUL\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get(\"/PgmDefsDU/:dbname\", cors(), async(req, res) =>\r\n{\r\n\r\n    console.log(\"inside pgmdefs data usage\");\r\n\r\n    var connObj = {};\r\n    var results = [];\r\n    var pgmrels = [];\r\n    var dbname = [req.params.dbname]\r\n    var dbname2 = 'JAPT2';\r\n    var japtxt = [];\r\n\r\n    connObj['query'] = `SELECT * from ${dbname}.PGMDEFS ORDER BY PGMID`;\r\n    results = await conn.connectionDB (connObj);\r\n    connObj['query'] = `SELECT * FROM ${dbname}.PGMCALLS WHERE PGMID <> CLDPGM AND CALLCLS = 'D' AND EXCPGM = ''`;\r\n    pgmrels = await conn.connectionDB (connObj);\r\n    connObj['query'] = `SELECT * from ${dbname2}.PGMDEFSJP`;\r\n    japtxt = await conn.connectionDB (connObj);\r\n    \r\n\r\n\r\n//  if (err1)\r\n//    throw err1;\r\n\r\n//  else\r\n//  {\r\n        console.log(\"pgmdefs = \", pgmrels);\r\n        res.send(JSON.stringify({ status: 200, error: null, response: {\r\n          programs:results, pgmrels:pgmrels,\r\n          japtxt:japtxt}}));\r\n//  }\r\n});\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get(\"/codefile\", cors(), function (request, response) {\r\n  //response.send(\"About Us\");\r\n});\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////////// DOUBTFUL\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////// CURRENTLY NOT IN USE. UNCHANGED.\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get('/entsch/:entids/:dbname', cors(), async (req, res ) =>\r\n{\r\n\r\n    console.log('inside entschema ');\r\n    var dbname = [req.params.dbname]\r\n\r\n    var connObj = {};\r\n    var entities = [];\r\n    const entids =JSON.parse(req.params.entids);\r\n    console.log('entids',entids);\r\n     let entIdValues = '(';\r\n    entids.map((id, index) => {\r\n      if (index === 0) entIdValues += \"'\" + id + \"'\";\r\n      else entIdValues += ',' + \"'\" + id + \"'\";\r\n    });\r\n    entIdValues += ')';\r\n\r\n    console.log('entIdValues = ', entIdValues);\r\n\r\n\r\n    connObj['query'] = `SELECT * FROM ${dbname}.ENTSCHEMA WHERE ENTID IN ${entIdValues}`;\r\n    entities = await conn.connectionDB (connObj);\r\n//  if (err)\r\n//    throw err;\r\n\r\n//  else\r\n//  {\r\n      console.log('entschema = ', entities);\r\n\r\n      const resp = JSON.stringify({\r\n          status: 200,\r\n          error: null,\r\n          response: {\r\n              entities\r\n          }\r\n      });\r\n\r\n      res.send(resp);\r\n//  }\r\n\r\n});\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nrouter.get(\"/PgmFiles/:dbname/:entid\", (req, res) =>\r\n{\r\n    console.log(\"inside pgmfiles\");\r\n    var entid = [req.params.entid];\r\n\r\n    //entid == \"0\"\r\n    //? \"SELECT A.*, B.PGMTX, C.ENTTX FROM PGMFILES AS A LEFT JOIN PGMDEFS AS B ON  trim(A.PGMID)=trim(B.PGMID) LEFT JOIN ENTITIES AS C ON  trim(A.ENTID)=trim(C.ENTID) ORDER BY A.PGMID LIMIT 1000\"\r\n    let sql = `SELECT  A.*, B.PGMTX, C.ENTTX FROM  ${dbname}.PGMFILES AS A LEFT JOIN ${dbname}.PGMDEFS AS B ON  trim(A.PGMID)=trim(B.PGMID) LEFT JOIN ${dbname}.ENTITIES AS C ON  trim(A.ENTID)=trim(C.ENTID\r\n      ) WHERE trim(A.ENTID)='${entid}'`;\r\n          let query = conn.query(sql, (err, results) =>\r\n          {\r\n            if (err) throw err;\r\n              console.log(\"query===\", sql);\r\n            console.log(\"result==\", results);\r\n            res.send(JSON.stringify({ status: 200, error: null, response: results }));\r\n          });\r\n      });\r\n      \r\n      \r\n      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n      router.get(\"/PgmFiles/Entities/:pgmid\", cors(), (req, res) =>\r\n      {\r\n      \r\n        var pgmid = req.params.pgmid;\r\n      \r\n        console.log(\"inside pgmfiles====\", req.params.pgmid.slice(-1));\r\n        if (req.params.pgmid.slice(-1) !== \"$\") {\r\n            let sql = `SELECT  A.*, B.PGMTX, C.ENTTX FROM  PGMFILES AS A LEFT JOIN PGMDEFS AS B ON trim(A.PGMID)=trim(B.PGMID) LEFT JOIN ENTITIES AS C ON trim(A.ENTID)=trim(C.ENTID)   \r\n            WHERE TRIM(A.PGMID)='${pgmid}'`;\r\n            let query = conn.query(sql, (err, results) => {\r\n              if (err) throw err;\r\n                res.send(JSON.stringify({ status: 200, error: null, response: results }));\r\n            });\r\n        }\r\n        else\r\n        {\r\n            ///not being used now....can b discarded later\r\n            var pgmid1 = req.params.pgmid.substr(0, req.params.pgmid.length - 1);\r\n            console.log(\"kya yahan aaya\", pgmid1);\r\n            let sql1 = `SELECT  A.ENTID as ID, B.ENTTX as TEXT FROM  PGMFILES AS A  INNER JOIN ENTITIES AS B ON trim(A.ENTID)=trim(B.ENTID)  WHERE TRIM(A.PGMID)='${pgmid1}' AND TRIM(A.FWRITE)=\"\" AND TRIM(A.FDEL\r\n      ETE)=\"\" AND TRIM(A.FUPDATE)=\"\"`;\r\n            let sql2 = `SELECT  A.ENTID as ID, B.ENTTX as TEXT FROM  PGMFILES AS A  INNER JOIN ENTITIES AS B ON trim(A.ENTID)=trim(B.ENTID)  WHERE TRIM(A.PGMID)='${pgmid1}' AND (TRIM(A.FWRITE)!=\"\" OR TRIM(A.FDE\r\n      LETE)!=\"\" OR TRIM(A.FUPDATE)!=\"\")`;\r\n            let IFS = conn.query(sql1, (err, result) => {\r\n      \r\n            if (err) throw err;\r\n              console.log(\"results1===\", result);\r\n      \r\n              let OFS = conn.query(sql2, (err, results) =>\r\n              {\r\n      \r\n                  if (err) throw err;\r\n                  // return results;\r\n                  res.send(\r\n                    JSON.stringify({\r\n                      status: 200,\r\n                      error: null,\r\n                      response: { InputFiles: result, OutputFiles: results },\r\n                    })\r\n                  );\r\n                  console.log(\"results2===\", response);\r\n              });\r\n            });\r\n            //console.log(\"OFS===\", OFS);\r\n        }\r\n      \r\n      });\r\n      ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get(\"/PgmSchema/:pgmid\", cors(), (req, res) =>\r\n{\r\n    console.log(\"inside PgmSchema\", req.params.pgmid);\r\n\r\n    var pgmid = [req.params.pgmid];\r\n\r\n    if (req.params.pgmid.slice(-1) !== \"$\") {\r\n      let sql = `SELECT  A.* , B.PGMTX, C.ENTTX FROM PGMSCMDB  AS A LEFT JOIN PGMDEFS AS B ON  TRIM(A.PGMID)=TRIM(B.PGMID)\r\n      LEFT JOIN ENTITIES AS C ON TRIM(A.ENTID) = TRIM(C.ENTID) WHERE trim(A.PGMID)=trim('${pgmid}')`;\r\n      console.log(\"SQL===\", sql);\r\n      let query = conn.query(sql, (err, results) => {\r\n        if (err) throw err;\r\n        res.send(JSON.stringify({ status: 200, error: null, response: results }));\r\n      });\r\n    }\r\n    else\r\n    {\r\n      var pgmid1 = req.params.pgmid.substr(0, req.params.pgmid.length - 1);\r\n      let sql = `SELECT  A.SHORTNM AS ID, A.FTXT AS TEXT FROM PGMSCMDB A\r\n      WHERE trim(A.PGMID)=trim('${pgmid1}')`;\r\n\r\n      console.log(\"SQL===\", sql);\r\n\r\n      let query = conn.query(sql, (err, results) => {\r\n      if (err) throw err;\r\n          res.send(JSON.stringify({ status: 200, error: null, response: results }));\r\n      });\r\n    }\r\n});\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get(\"/EntSchema/:entid\", cors(), (req, res) =>\r\n{\r\n    console.log(\"inside entschema\", [req.params.entid]);\r\n    var entid = [req.params.entid];\r\n\r\n    if (req.params.entid.slice(-1) !== \"$\") {\r\n        let sql = `SELECT * FROM  ENTSCHEMA WHERE trim(ENTID)='${entid}'`;\r\n        let query = conn.query(sql, (err, results) => {\r\n        if (err) throw err;\r\n          res.send(JSON.stringify({ status: 200, error: null, response: results }));\r\n        });\r\n    }\r\n    else\r\n    {\r\n        var entid1 = req.params.entid.substr(0, req.params.entid.length - 1);\r\n        let sql = `SELECT SHORTNM AS ID, FTXT AS TEXT FROM  ENTSCHEMA WHERE trim(ENTID)='${entid1}'`;\r\n        let query = conn.query(sql, (err, results) => {\r\n          if (err) throw err;\r\n            console.log(\"entschema SQL==\", sql, results);\r\n          res.send(JSON.stringify({ status: 200, error: null, response: results }));\r\n        });\r\n    }\r\n});\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nrouter.get(\"/PgmSchema/2/:pgmid/:entid\", cors(), (req, res) =>\r\n{\r\n    console.log(\"inside PgmSchema\");\r\n    var pgmid = [req.params.pgmid];\r\n    var entid = [req.params.entid];\r\n\r\n    let sql = `SELECT  A.* , B.PGMTX, C.ENTTX FROM PGMSCMDB  AS A LEFT JOIN PGMDEFS AS B ON  TRIM(A.PGMID)=TRIM(B.PGMID)\r\n    LEFT JOIN ENTITIES AS C ON TRIM(A.ENTID) = TRIM(C.ENTID) WHERE trim(A.PGMID)=trim('${pgmid}') AND trim(A.ENTID)=trim('${entid}')`;\r\n    console.log(\"SQL===\", sql);\r\n    let query = conn.query(sql, (err, results) =>\r\n    {\r\n        if (err) throw err;\r\n          res.send(JSON.stringify({ status: 200, error: null, response: results }));\r\n    });\r\n});\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get(\"/PgmSchema/3/:entid\", cors(), (req, res) =>\r\n{\r\n\r\n    console.log(\"inside PgmSchema\");\r\n\r\n    var entid = [req.params.entid];\r\n\r\n    let sql = `SELECT  A.* , B.PGMTX, C.ENTTX FROM PGMSCMDB  AS A LEFT JOIN PGMDEFS AS B ON  TRIM(A.PGMID)=TRIM(B.PGMID)\r\n    LEFT JOIN ENTITIES AS C ON TRIM(A.ENTID) = TRIM(C.ENTID) WHERE trim(A.ENTID)=trim('${entid}') ORDER BY A.PGMID`;\r\n\r\n    console.log(\"SQL===\", sql);\r\n    let query = conn.query(sql, (err, results) =>\r\n    {\r\n      if (err) throw err;\r\n        res.send(JSON.stringify({ status: 200, error: null, response: results }));\r\n    });\r\n});\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get(\"/Entview/:entid\", cors(), (req, res) =>\r\n{\r\n    console.log(\"inside Entviews\");\r\n    var entid = [req.params.entid];\r\n\r\n    let sql = `SELECT  * FROM  ENTVIEWS WHERE trim(ENTID)=trim('${entid}')`;\r\n    console.log(\"SQL===\", sql);\r\n    let query = conn.query(sql, (err, results) =>\r\n    {\r\n        if (err) throw err;\r\n        res.send(JSON.stringify({ status: 200, error: null, response: results }));\r\n    });\r\n});\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get(\"/EntRels/:entid\", cors(), (req, res) =>\r\n{\r\n\r\n    console.log(\"inside EntRels\");\r\n    var entid = [req.params.entid];\r\n\r\n    let sql = `SELECT A.*, B.ENTTX as PARTX,  C.ENTTX as CHLDTX  FROM ENTRELS AS A LEFT JOIN ENTITIES AS B ON  trim(A.PAR)=trim(B.ENTID)\r\n    LEFT JOIN ENTITIES AS C ON trim(A.CHLD) = trim(C.ENTID) WHERE trim(A.PAR)='${entid}' or trim(A.CHLD)='${entid}' ;`;\r\n\r\n    console.log(\"SQL===\", sql);\r\n    let query = conn.query(sql, (err, results) =>\r\n    {\r\n        if (err) throw err;\r\n          res.send(JSON.stringify({ status: 200, error: null, response: results }));\r\n    });\r\n});\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get(\"/PgmCalled/:pgmid\", cors(), async (req, res) =>\r\n{\r\n\r\n    console.log(\"inside Pgmcalled==\", req.params.pgmid);\r\n    var pgmid = req.params.pgmid;\r\n    if (req.params.pgmid.slice(-1) !== \"$\") {\r\n        let sql = `SELECT A.*, B.PGMTX as PGMTX, C.PGMTX as CLDPGMTX  FROM PGMCALLS AS A LEFT JOIN PGMDEFS AS B ON  trim(A.PGMID)=trim(B.PGMID)\r\n        LEFT JOIN PGMDEFS AS C ON  trim(A.CLDPGM)=trim(C.PGMID)\r\n        WHERE trim(A.PGMID)=trim('${pgmid}') ;`;\r\n        console.log(\"SQL===\", sql);\r\n        let query = conn.query(sql, (err, results) => {\r\n            if (err) throw err;\r\n              res.send(JSON.stringify({ status: 200, error: null, response: results }));\r\n        });\r\n      }\r\n      else\r\n      {\r\n          var pgmid1 = req.params.pgmid.substr(0, req.params.pgmid.length - 1);\r\n          let sql = `SELECT A.CLDPGM as ID, B.PGMTX as TEXT  FROM PGMCALLS AS A LEFT JOIN PGMDEFS AS B ON  trim(A.CLDPGM)=trim(B.PGMID)\r\n          WHERE trim(A.PGMID)=trim('${pgmid1}') ;`;\r\n          console.log(\"SQL===\", sql);\r\n          let query = conn.query(sql, (err, results) =>\r\n          {\r\n            if (err) throw err;\r\n                res.send(JSON.stringify({ status: 200, error: null, response: results }));\r\n          });\r\n      }\r\n  });\r\n  \r\n  \r\n  ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n  router.get(\"/PgmCalling/:pgmid\", cors(), async (req, res) =>\r\n  {\r\n  \r\n      console.log(\"inside Pgmcalling==\", req.params.pgmid);\r\n      var pgmid = [req.params.pgmid];\r\n      if (req.params.pgmid.slice(-1) !== \"$\")\r\n      {\r\n          let sql = `SELECT A.*, B.PGMTX as PGMTX, C.PGMTX as CALLPGMTX  FROM PGMCALLS AS A INNER JOIN PGMDEFS AS B ON  trim(A.PGMID)=trim(B.PGMID) INNER JOIN PGMDEFS AS C ON  trim(A.CLDPGM)=trim(C.PGMID)\r\n          WHERE trim(A.CLDPGM)=trim('${pgmid}') ;`;\r\n          console.log(\"SQL===\", sql);\r\n          let query = conn.query(sql, (err, results) =>\r\n          {\r\n            if (err) throw err;\r\n              res.send(JSON.stringify({ status: 200, error: null, response: results }));\r\n          });\r\n      }\r\n      else\r\n      {\r\n        var pgmid1 = req.params.pgmid.substr(0, req.params.pgmid.length - 1);\r\n        let sql = `SELECT A.PGMID as ID, B.PGMTX as TEXT FROM PGMCALLS AS A INNER JOIN PGMDEFS AS B ON  trim(A.PGMID)=trim(B.PGMID)\r\n        WHERE trim(A.CLDPGM)=trim('${pgmid1}') ;`;\r\n        console.log(\"SQL===\", sql);\r\n        let query = conn.query(sql, (err, results) =>\r\n        {\r\n          if (err) throw err;\r\n            res.send(JSON.stringify({ status: 200, error: null, response: results }));\r\n        });\r\n      }\r\n  });\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get(\"/PgmCode/:entid/:pgmid/:shortnm\", cors(), async (req, res) =>\r\n{\r\n    var entid = [req.params.entid];\r\n    var pgmid = [req.params.pgmid];\r\n    var shortnm = [req.params.shortnm];\r\n\r\n    if (req.params.shortnm.slice(-1) !== \"$\")\r\n    {\r\n        let sql = `SELECT *  FROM PGMCODE WHERE trim(pgmid)=trim('${pgmid}') AND trim(FILENM)=trim('${entid}') AND (trim(MVARDB)=trim('${shortnm}') || trim(SVAR1)=trim('${shortnm}') || trim(SVAR2)=trim('${shortnm}') ||trim(SVAR3)=trim('${shortnm}') || trim(SVAR4)=trim('${shortnm}'));`;\r\n        console.log(\"SQL===\", sql);\r\n        let query = conn.query(sql, (err, results) =>\r\n        {\r\n            if (err) throw err;\r\n            res.send(JSON.stringify({ status: 200, error: null, response: results }));\r\n        });\r\n    }\r\n    else\r\n    {\r\n        var shortnm1 = req.params.shortnm.substr(0, req.params.shortnm.length - 1);\r\n        let sql = `SELECT STNNUM as ID, STN as TEXT  FROM PGMCODE WHERE trim(pgmid)=trim('${pgmid}') AND trim(FILENM)=trim('${entid}') AND trim(MVAR)=trim('${shortnm1}');`;\r\n        let query = conn.query(sql, (err, results) => {\r\n        if (err)\r\n          throw err;\r\n        console.log(\"PGMCODE SQL==\", sql, results);\r\n        res.send(JSON.stringify({ status: 200, error: null, response: results }));\r\n    });\r\n\r\n  }\r\n\r\n});\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get(\"/PgmCode/2/:entid\", cors(), async (req, res) =>\r\n{\r\n\r\n    var entid = [req.params.entid];\r\n\r\n    let sql = `SELECT * FROM PGMCODE\r\n    WHERE trim(FILENM)=trim('${entid}') ORDER BY PGMID;`;\r\n    console.log(\"SQL===\", sql);\r\n    let query = conn.query(sql, (err, results) =>\r\n    {\r\n      if (err) throw err;\r\n        res.send(JSON.stringify({ status: 200, error: null, response: results }));\r\n    });\r\n});\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get(\"/PgmParam/:pgmid\", cors(), async (req, res) =>\r\n{\r\n    var pgmid = [req.params.pgmid];\r\n\r\n    let sql = `SELECT *  FROM PGMPARMS\r\n    WHERE trim(pgmid)=trim('${pgmid}') ;`;\r\n    console.log(\"SQL===\", sql);\r\n\r\n    let query = conn.query(sql, (err, results) =>\r\n    {\r\n      if (err) throw err;\r\n        res.send(JSON.stringify({ status: 200, error: null, response: results }));\r\n    });\r\n\r\n});\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get(\"/PgmCallingParams/:program/:cldprogram\", cors(), async (req, res) =>\r\n{\r\n\r\n  var pgmid = [req.params.program];\r\n  var cldpgmid = [req.params.cldprogram];\r\n\r\n  let sql = `SELECT *  FROM PGMCPRMS\r\n  WHERE trim(pgmid)=trim('${pgmid}') AND trim(cldpgm)=trim('${cldpgmid}');`;\r\n  console.log(\"SQL===\", sql);\r\n\r\n  let query = conn.query(sql, (err, results) =>\r\n  {\r\n      if (err) throw err;\r\n        res.send(JSON.stringify({ status: 200, error: null, response: results }));\r\n  });\r\n\r\n});\r\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get(\"/GetCallingPgms/:dbname/:pgmid\", cors(),async (req, res) =>\r\n{\r\n  var connObj = {};\r\n  var results = [];\r\n  var dbname = [req.params.dbname]\r\n  var pgmid = [req.params.pgmid];\r\n  \r\n  connObj['query'] = `SELECT trim(A.PGMID) as PGMID, B.PGMTX as PGMTX  FROM ${dbname}.PGMCALLS AS A LEFT JOIN ${dbname}.PGMDEFS AS B ON  trim(A.PGMID)=trim(B.PGMID) WHERE trim(A.CLDPGM)=trim('${pgmid}') ;`;\r\n  results = await conn.connectionDB (connObj);\r\n  console.log(\"callingpgms = \", results);\r\n        res.send(JSON.stringify({ status: 200, error: null, response: {\r\n                     results}}));\r\n\r\n});\r\n\r\n\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get(\"/DataUsageModule/:dbname/:modid\", cors(),async (req, res) =>\r\n{\r\n  var connObj = {};\r\n  var results = [];\r\n  var dbname = [req.params.dbname]\r\n  var modid = [req.params.modid];\r\n  connObj['query'] = `SELECT  A.ENTID as OBJID,A.WHFUSG as WHFUSG, B.ENTTX AS OBJTEXT  FROM  ${dbname}.PGMENTS AS A  LEFT JOIN ${dbname}.ENTITIES AS B ON trim(A.ENTID)=trim(B\n.ENTID) WHERE TRIM(A.PGMID)='${modid}' order by WHFUSG DESC`;\r\n  results = await conn.connectionDB (connObj);\r\n  console.log(\"calling  files = \", results);\r\n        res.send(JSON.stringify({ status: 200, error: null, response: {\r\n                     results}}));\r\n\r\n});\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.get(\"/DataUsageLogView/:dbname/:viewid\", cors(),async (req, res) =>\r\n{\r\n  var connObj = {};\r\n  var results = [];\r\n  var dbname = [req.params.dbname]\r\n  var viewid = [req.params.viewid];\r\n  connObj['query'] = `SELECT  A.PGMID as OBJID, A.WHFUSG as WHFUSG , B.PGMTX AS OBJTEXT FROM  ${dbname}.PGMVIEWS AS A  LEFT JOIN ${dbname}.PGMDEFS AS B ON trim(A.PGMID)=trim(B\n.PGMID) WHERE TRIM(A.VIEWID)='${viewid}' order by WHFUSG DESC`;\r\n  results = await conn.connectionDB (connObj);\r\n  console.log(\"calling  files = \", results);\r\n        res.send(JSON.stringify({ status: 200, error: null, response: {\r\n                     results}}));\r\n\r\n});\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////// CURRENTLY NOT IN USE. UNCHANGED.\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n/*\r\nrouter.get(\"/dbtype\", function(req, res, next)\r\n{\r\n    console.log(\"dbtype \", req.query.dbtype);\r\n    dbTypeSelected =  req.query.dbtype;\r\n    console.log(\"dbTypeSelected\", dbTypeSelected);\r\n    res.redirect('/');\r\n});\r\n*/\r\n\r\n////////////////////////////////////////////////////////////////////////////////////////////////////   All other requests redirect to 404\r\nrouter.get('/', function(req, res, next)\r\n{\r\n\r\n  console.log(`req recieved`);\r\n  console.dir(req.originalUrl)                   // 'http://www.example.com/admin/new?a=b\r\n  console.dir(req.baseUrl)                       // '/admin'\r\n  console.dir(req.path)                          // '/new'\r\n  console.dir(req.baseUrl + req.path)            // '/admin/new'\r\n\r\n  res.write('<html>');\r\n  res.write('<body>');\r\n\r\n  if (dbTypeSelected == \"DB2\")\r\n  {\r\n    res.write('<h1>Hello, this response is coming from DB2/AS400!</h1>');  }\r\nelse\r\n{\r\n  if (dbTypeSelected == \"MySQL\")\r\n  {\r\n    res.write('<h1>Hello, this response is coming from MySQL/MAC!</h1>');\r\n  }\r\n}\r\n/*\r\nres.write('<form action=\"/dbtype\" onsubmit=\"myFunction()\" target=\"_parent\">');\r\nres.write('<label for=\"dbtype\">Choose a DB:</label>');\r\nres.write('<select name=\"dbtype\" id=\"dbtype\">');\r\nres.write('<option value=\"MySQL\">MySQL</option>');\r\nres.write('<option value=\"DB2\">DB2</option>');\r\nres.write('</select>');\r\nres.write('<br><br>');\r\nres.write('<input type=\"submit\" value=\"Submit\">');\r\nres.write('</form>');\r\nres.write('<script>');\r\nres.write('function myFunction() {alert(\"submitted \" + dbtype);}');\r\nres.write('</script>');\r\n*/\r\n\r\nres.write('</body>');\r\nres.write('</html>');\r\n\r\nres.end();\r\n\r\n});\r\n\r\n\r\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\nrouter.all(\"*\", function (req, res, next)\r\n{\r\n  return res.send('Page Not Found');\r\n  next();\r\n});\r\n\r\n\r\nmodule.exports = router;\r\n\r\n\r\n\r\n            \r\n  \r\n\n\n//# sourceURL=webpack://expressapi/./routes/index.js?");

/***/ }),

/***/ "./settings.js":
/*!*********************!*\
  !*** ./settings.js ***!
  \*********************/
/***/ ((module) => {

eval("let environment = \"dev\";\n\nlet serverURLs = \n{\n    \"dev\": \n    {\n        \"NODE_SERVER\": \"localhost\",\n        \"NODE_DB2SERVER_PORT\": \"50000\",\n        \"NODE_MYSQLSERVER_PORT\": \"4000\",\n\n        \"MYSQL_HOST\": 'localhost',\n        \"MYSQL_USER\": 'root',\n       // \"MYSQL_PASSWORD\": 'sql123',\n       // 'MYSQL_DATABASE': 'SPHA014'\n       \"MYSQL_PASSWORD\": 'mysql123',\n        'MYSQL_DATABASE': 'custd008'\n    }\n}\n\nlet config = \n{\n    \"DB_URL_MYSQL\": \n    {\n        \"host\": `${serverURLs[environment].MYSQL_HOST}`,\n        \"user\": `${serverURLs[environment].MYSQL_USER}`,\n        \"password\": `${serverURLs[environment].MYSQL_PASSWORD}`,\n        \"database\": `${serverURLs[environment].MYSQL_DATABASE}`\n    },\n    \n    \"NODE_DB2SERVER_PORT\": \n    {\n        \"port\": `${serverURLs[environment].NODE_DB2SERVER_PORT}`\n    },\n    \n    \"NODE_MYSQLSERVER_PORT\": \n    {\n        \"port\": `${serverURLs[environment].NODE_MYSQLSERVER_PORT}`\n    },\n\n    \"NODE_SERVER_URL\": \n    {\n        \"url\": `${serverURLs[environment].NODE_SERVER}`\n    }    \n};\n\nmodule.exports = config;\n\n//# sourceURL=webpack://expressapi/./settings.js?");

/***/ }),

/***/ "cookie-parser":
/*!********************************!*\
  !*** external "cookie-parser" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("cookie-parser");

/***/ }),

/***/ "cors":
/*!***********************!*\
  !*** external "cors" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("cors");

/***/ }),

/***/ "debug":
/*!************************!*\
  !*** external "debug" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("debug");

/***/ }),

/***/ "express":
/*!**************************!*\
  !*** external "express" ***!
  \**************************/
/***/ ((module) => {

"use strict";
module.exports = require("express");

/***/ }),

/***/ "http-errors":
/*!******************************!*\
  !*** external "http-errors" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("http-errors");

/***/ }),

/***/ "idb-connector":
/*!********************************!*\
  !*** external "idb-connector" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("idb-connector");

/***/ }),

/***/ "idb-pconnector":
/*!*********************************!*\
  !*** external "idb-pconnector" ***!
  \*********************************/
/***/ ((module) => {

"use strict";
module.exports = require("idb-pconnector");

/***/ }),

/***/ "morgan":
/*!*************************!*\
  !*** external "morgan" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("morgan");

/***/ }),

/***/ "mysql2":
/*!*************************!*\
  !*** external "mysql2" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("mysql2");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

"use strict";
module.exports = require("https");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./bin/www");
/******/ 	
/******/ })()
;